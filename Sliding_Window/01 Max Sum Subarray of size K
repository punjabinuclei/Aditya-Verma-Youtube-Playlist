// https://www.geeksforgeeks.org/find-maximum-minimum-sum-subarray-size-k/
//Time Complexity : O(n)
//Auxiliary Space : O(1)


class Solution{
  public:
int maximumSumSubarray(int K, vector<int> &Arr , int N){
  int i=0;
  int j=0;
  int sum=0;
  int mx=INT_MIN;
  while (j<N){
    sum=sum+Arr[j]; // do calculation to reduse tc
    if (j-i+1<K) J++; // increament j upto when the size of the size of window is not equal to required size
    else if ((j-i+1)==K) // when sindow size hit to the required window size 
    {
      mx=max(mx,sum); // selecting ans from the candidates
      sum=sum-Arr[i]; // start removing from the first
      i++;
      j++;
    }
  }
  return mx;
}
};




//Brute Force Approach


#include<bits/stdc++.h>
using namespace std;


int main()
{


#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("error.txt", "w", stderr);
  freopen("output.txt", "w", stdout);
#endif




  int a[4];


  for (int i = 0; i < 4; i++)
  {
    cin >> a[i];
  }

  int sum = 0;
  int mx = INT_MIN;


  for (int i = 0; i < 2; ++i)
  {
    for (int j = i; j < i + 2; j++)
    {
      sum += a[j];

      mx = max(mx, sum);

    }
    sum -= a[i];
  }



  cout << mx;




  cerr << "time taken :" << (float)clock() / CLOCKS_PER_SEC << " secs" << endl;


  return 0;
}
